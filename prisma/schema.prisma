datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserAccountType {
  DEFAULT
  FREEMIUM
  STANDARD
  PREMIUM
  ADMIN
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

model User {
  // Non-colliding Auto-Incrementing UUID:
  id                 String              @id @unique @default(uuid())
  // Account type:
  type               UserAccountType     @default(DEFAULT)
  // User's customer UUID in associated CRM:
  customerId         String?
  // User's subscription UUID in associated CRM:
  subscriptionId     String?
  // User's subscription status in associated CRM:
  subscriptionStatus SubscriptionStatus?
  // Provider, e.g., Google Firebase Auth:
  provider           String              @default("fireauth")
  // Link to the provider account Id:
  providerAccountId  String?
  // Name:
  name               String?
  // Email:
  email              String?             @unique
  // Email Verified?:
  emailVerified      DateTime?
  // Avatar
  avatar             String?
  // Relation of Sessions:
  sessions           Session[]
  // Relation of Observations:
  observations       Observation[]

  @@unique([id, provider, providerAccountId])
  @@map("users")
}

model Session {
  // Auto-Incrementing UUID:
  id           String    @id @unique @default(uuid())
  // Session Owner (defaults automatically to Firebase Auth User UID):
  owner        String    @db.VarChar(300)
  // When the Session is designated to start in UTC e.g., 2021-05-14T00:00:00.000Z:
  start        DateTime
  // When the Session is designated to end in UTC e.g., 2021-05-14T01:00:00.000Z:
  end          DateTime
  // Is the session designated as live control?
  isLive       Boolean   @default(false)
  // Foreign Key Relationship to Telescope (e.g., what telescope has the session been booked for?):
  telescope    Telescope @relation(fields: [telescopeId], references: [id])
  // Foreign Key Relationship to Telescope ID:
  telescopeId  String
  // User Id static:
  userId       String
  // User Foreign Key Relationship for ownership:
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Uniquely identifable session token:
  sessionToken String    @unique @db.VarChar(300)
  // Expires at this time, e.g., in UTC e.g., 2021-05-14T01:00:00.000Z:
  expires      DateTime

  @@unique([telescopeId, start, end])
  @@index([userId])
  @@map("sessions")
}

model Telescope {
  // Auto-Incrementing UUID:
  id          String    @id @unique @default(uuid())
  // The IPv4 address of the telescope"
  ipv4        String
  // The IPv6 address of the telescope"
  ipv6        String
  // The DNS resolvable domain name of the telescope:
  domain      String
  // The name of the telescope:
  name        String
  // The description of the telescope:
  description String?
  // The location of the telescope:
  location    String
  // The geographic latitude of the telescope (in degrees, N positive S negative):
  latitude    Decimal
  // The geographic longitude of the telescope (in degrees, W negative, E positive):
  longitude   Decimal
  // The geographic elevation of the telescope (in m above sea level):
  elevation   Decimal
  // The timezone of the telescope in IANA format e.g., "America/New_York":
  timezone    String    @default("UTC")
  // Relation of Sessions:
  sessions    Session[]

  @@map("telescopes")
}

model Observation {
  // Auto-Incrementing UUID:
  id          String     @id @unique @default(uuid())
  // The name of the observation (assume "target" e.g., "M31"):
  name        String?
  // The description of the observation:
  description String?
  // The Right Ascension of the observation in degrees:
  ra          Decimal
  // The declination of the observation in degrees:
  dec         Decimal
  // User Id static:
  userId      String
  // User Foreign Key Relationship for ownership:
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relation of Exposures:
  exposures   Exposure[]

  @@index([userId])
  @@map("observations")
}

model Exposure {
  // Auto-Incrementing UUID:
  id            String      @id @unique @default(uuid())
  // The description of the exposure:
  description   String?
  // Default exposure duraiton in milliseconds (30 seconds):
  duration      Int         @default(30000)
  // When the exposure is designated to start in UTC e.g., 2021-05-14T00:00:00.000Z:
  start         DateTime
  // When the exposure is designated to end in UTC e.g., 2021-05-14T01:00:00.000Z:
  end           DateTime
  // The filter to apply to the exposure (chouce of LRGB, BVR, OIII, SII, NII, Ha, Hb EXO, NearIR, PhotometricR):
  filter        String?     @default("LRGB")
  // The sensor type used in the exposure (choice of Monochrome, RGGB et al.):
  sensor        String?     @default("Monochrome")
  // The file format of the exposure, e.g., fits, xsif, tiff, jpg, png, etc.:
  format        String?     @default("fits")
  // The location URL of where the resource can be found:
  location      String?     @db.Text
  // Foreign Key Relationship to Observation:
  observation   Observation @relation(fields: [observationId], references: [id], onDelete: Cascade)
  // Foreign Key Relationship to Observation ID:
  observationId String

  @@index([observationId])
  @@map("exposures")
}
